/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 1.1.0
 * Template Version: 0.7.0-32-g81a7f63
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2CSen55.h"
#include "Arduino.h"
#include "SensirionCore.h"
#include <Wire.h>

#define SEN55_I2C_ADDRESS 0x69

SensirionI2CSen55::SensirionI2CSen55() {
}

void SensirionI2CSen55::begin(TwoWire& i2cBus) {
    _i2cBus = &i2cBus;
}

uint16_t SensirionI2CSen55::startMeasurement() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x21);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(50);
    return error;
}

uint16_t SensirionI2CSen55::stopMeasurement() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x104);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(200);
    return error;
}

uint16_t SensirionI2CSen55::readDataReady(bool& dataReady) {
    uint16_t error;
    uint8_t buffer[3];
    SensirionI2CTxFrame txFrame(buffer, 3);

    error = txFrame.addCommand(0x202);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 3);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 3,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    uint8_t padding;
    error |= rxFrame.getUInt8(padding);  // remove padding
    error |= rxFrame.getBool(dataReady);
    return error;
}

uint16_t SensirionI2CSen55::readMeasuredPmValuesFloat(
    float& massConcentrationPm1p0, float& massConcentrationPm2p5,
    float& massConcentrationPm4p0, float& massConcentrationPm10p0,
    float& numberConcentrationPm0p5, float& numberConcentrationPm1p0,
    float& numberConcentrationPm2p5, float& numberConcentrationPm4p0,
    float& numberConcentrationPm10p0, float& typicalParticleSize) {
    uint16_t error;
    uint8_t buffer[60];
    SensirionI2CTxFrame txFrame(buffer, 60);

    error = txFrame.addCommand(0x331);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 60);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 60,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getFloat(massConcentrationPm1p0);
    error |= rxFrame.getFloat(massConcentrationPm2p5);
    error |= rxFrame.getFloat(massConcentrationPm4p0);
    error |= rxFrame.getFloat(massConcentrationPm10p0);
    error |= rxFrame.getFloat(numberConcentrationPm0p5);
    error |= rxFrame.getFloat(numberConcentrationPm1p0);
    error |= rxFrame.getFloat(numberConcentrationPm2p5);
    error |= rxFrame.getFloat(numberConcentrationPm4p0);
    error |= rxFrame.getFloat(numberConcentrationPm10p0);
    error |= rxFrame.getFloat(typicalParticleSize);
    return error;
}

uint16_t SensirionI2CSen55::readMeasuredValues(
    uint16_t& massConcentrationPm1p0, uint16_t& massConcentrationPm2p5,
    uint16_t& massConcentrationPm4p0, uint16_t& massConcentrationPm10p0,
    int16_t& ambientHumidity, int16_t& ambientTemperature, int16_t& vocIndex,
    int16_t& noxIndex) {
    uint16_t error;
    uint8_t buffer[24];
    SensirionI2CTxFrame txFrame(buffer, 24);

    error = txFrame.addCommand(0x3C4);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 24);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 24,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt16(massConcentrationPm1p0);
    error |= rxFrame.getUInt16(massConcentrationPm2p5);
    error |= rxFrame.getUInt16(massConcentrationPm4p0);
    error |= rxFrame.getUInt16(massConcentrationPm10p0);
    error |= rxFrame.getInt16(ambientHumidity);
    error |= rxFrame.getInt16(ambientTemperature);
    error |= rxFrame.getInt16(vocIndex);
    error |= rxFrame.getInt16(noxIndex);
    return error;
}

uint16_t SensirionI2CSen55::readMeasuredRawValues(int16_t& rawHumidity,
                                                  int16_t& rawTemperature,
                                                  uint16_t& rawVoc,
                                                  uint16_t& rawNox) {
    uint16_t error;
    uint8_t buffer[12];
    SensirionI2CTxFrame txFrame(buffer, 12);

    error = txFrame.addCommand(0x3D2);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 12);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 12,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getInt16(rawHumidity);
    error |= rxFrame.getInt16(rawTemperature);
    error |= rxFrame.getUInt16(rawVoc);
    error |= rxFrame.getUInt16(rawNox);
    return error;
}

uint16_t SensirionI2CSen55::startFanCleaning() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x5607);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(20);
    return error;
}

uint16_t SensirionI2CSen55::setTemperatureOffsetParameters(
    int16_t tempOffset, int16_t slope, uint16_t timeConstant) {
    uint16_t error;
    uint8_t buffer[11];
    SensirionI2CTxFrame txFrame(buffer, 11);

    error = txFrame.addCommand(0x60B2);
    error |= txFrame.addInt16(tempOffset);
    error |= txFrame.addInt16(slope);
    error |= txFrame.addUInt16(timeConstant);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(20);
    return error;
}

uint16_t SensirionI2CSen55::getTemperatureOffsetParameters(
    int16_t& tempOffset, int16_t& slope, uint16_t& timeConstant) {
    uint16_t error;
    uint8_t buffer[9];
    SensirionI2CTxFrame txFrame(buffer, 9);

    error = txFrame.addCommand(0x60B2);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 9);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 9,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getInt16(tempOffset);
    error |= rxFrame.getInt16(slope);
    error |= rxFrame.getUInt16(timeConstant);
    return error;
}

uint16_t SensirionI2CSen55::setWarmStartParameter(uint16_t warmStart) {
    uint16_t error;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame(buffer, 5);

    error = txFrame.addCommand(0x60C6);
    error |= txFrame.addUInt16(warmStart);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(20);
    return error;
}

uint16_t SensirionI2CSen55::getWarmStartParameter(uint16_t& warmStart) {
    uint16_t error;
    uint8_t buffer[3];
    SensirionI2CTxFrame txFrame(buffer, 3);

    error = txFrame.addCommand(0x60C6);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 3);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 3,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt16(warmStart);
    return error;
}

uint16_t SensirionI2CSen55::setFanAutoCleaningInterval(uint32_t interval) {
    uint16_t error;
    uint8_t buffer[8];
    SensirionI2CTxFrame txFrame(buffer, 8);

    error = txFrame.addCommand(0x8004);
    error |= txFrame.addUInt32(interval);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(20);
    return error;
}

uint16_t SensirionI2CSen55::getFanAutoCleaningInterval(uint32_t& interval) {
    uint16_t error;
    uint8_t buffer[6];
    SensirionI2CTxFrame txFrame(buffer, 6);

    error = txFrame.addCommand(0x8004);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 6);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 6,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt32(interval);
    return error;
}

uint16_t SensirionI2CSen55::getProductName(unsigned char productName[],
                                           uint8_t productNameSize) {
    uint16_t error;
    uint8_t buffer[48];
    SensirionI2CTxFrame txFrame(buffer, 48);

    error = txFrame.addCommand(0xD014);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(50);

    SensirionI2CRxFrame rxFrame(buffer, 48);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 48,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getBytes(productName, productNameSize);
    return error;
}

uint16_t SensirionI2CSen55::getSerialNumber(unsigned char serialNumber[],
                                            uint8_t serialNumberSize) {
    uint16_t error;
    uint8_t buffer[48];
    SensirionI2CTxFrame txFrame(buffer, 48);

    error = txFrame.addCommand(0xD033);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(50);

    SensirionI2CRxFrame rxFrame(buffer, 48);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 48,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getBytes(serialNumber, serialNumberSize);
    return error;
}

uint16_t
SensirionI2CSen55::getVersion(uint8_t& firmwareMajor, uint8_t& firmwareMinor,
                              bool& firmwareDebug, uint8_t& hardwareMajor,
                              uint8_t& hardwareMinor, uint8_t& protocolMajor,
                              uint8_t& protocolMinor) {
    uint16_t error;
    uint8_t buffer[12];
    SensirionI2CTxFrame txFrame(buffer, 12);

    error = txFrame.addCommand(0xD100);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 12);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 12,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt8(firmwareMajor);
    error |= rxFrame.getUInt8(firmwareMinor);
    error |= rxFrame.getBool(firmwareDebug);
    error |= rxFrame.getUInt8(hardwareMajor);
    error |= rxFrame.getUInt8(hardwareMinor);
    error |= rxFrame.getUInt8(protocolMajor);
    error |= rxFrame.getUInt8(protocolMinor);
    uint8_t padding;
    error |= rxFrame.getUInt8(padding);  // remove padding
    return error;
}

uint16_t SensirionI2CSen55::readDeviceStatus(uint32_t& deviceStatus) {
    uint16_t error;
    uint8_t buffer[6];
    SensirionI2CTxFrame txFrame(buffer, 6);

    error = txFrame.addCommand(0xD206);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 6);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 6,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt32(deviceStatus);
    return error;
}

uint16_t SensirionI2CSen55::readAndClearDeviceStatus(uint32_t& deviceStatus) {
    uint16_t error;
    uint8_t buffer[6];
    SensirionI2CTxFrame txFrame(buffer, 6);

    error = txFrame.addCommand(0xD210);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(20);

    SensirionI2CRxFrame rxFrame(buffer, 6);
    error = SensirionI2CCommunication::receiveFrame(SEN55_I2C_ADDRESS, 6,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt32(deviceStatus);
    return error;
}

uint16_t SensirionI2CSen55::deviceReset() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0xD304);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SEN55_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(200);
    return error;
}
